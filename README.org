The main repository is located at [[https://gitlab.otonokizaka.moe/Umi/til]]

* Today I Learned

Collection of small writeups from my daily learning.

This document is best edited with emacs [[https://orgmode.org/][org-mode]].

** Docker
*** Use Docker buildkit with docker-compose
Docker has a new build backend called [[https://docs.docker.com/engine/reference/builder/#buildkit][buildkit]], which is an improvement over the original docker build backend.

You can activate it by exporting the ~DOCKER_BUILDKIT~ environment variable like so:
#+begin_src sh
export DOCKER_BUILDKIT=1
#+end_src

This works great with ~docker build~, however it doesn't work with ~docker-compose build~.

You can fix that by exporting one more environment variable like so:
#+begin_src sh
export COMPOSE_DOCKER_CLI_BUILD=1
#+end_src

[[https://stackoverflow.com/questions/58592259/how-do-you-enable-buildkit-with-docker-compose][h/t]]

** Emacs
*** Insert heading in org-mode

There are commands for inserting a heading below the current line in org-mode, so you don't have to type out the ~*~ yourself.

The most useful one is probably ~org-insert-heading-respect-content~, which inserts a new heading at the end of the current subtree.

[[https://orgmode.org/manual/Structure-Editing.html][h/t]]

** Python
*** Fix libffi error

When the underlying system upgrades ~libffi~, and you are using a Python version installed with ~pyenv~, you might run into this error:

#+begin_src python
>>> import ctypes
Traceback (most recent call last):
    File "<stdin>", line 1, in <module>
    File "/home/umi/.pyenv/versions/3.8.1/lib/python3.8/ctypes/__init__.py", line 7, in <module>
        from _ctypes import Union, Structure, Array
ImportError: libffi.so.6: cannot open shared object file: No such file or directory
#+end_src

The reason is that ~libffi.so.6~ no longer exists and is repalced by a newer version of ~libffi~

The fix is simply recompile your Python:

#+begin_src shell
pyenv install -f 3.8.1 # or whatever version
#+end_src

** Scala
*** Access global build info
It is often helpful to access global build info in your sbt files.

One might attempt to do something like this:

#+begin_src scala
val version_ = (version in ThisBuild).value

someTask := // do something with version_
#+end_src

However, the above doesn't work, to proper way is to do this:

#+begin_src scala
someTask := {
    val version_ = (version in ThisBuild).value
    // do something with version_
}
#+end_src

[[https://stackoverflow.com/questions/22538480/passing-value-of-version-in-thisbuild-setting-defined-in-version-sbt-to-artifact][h/t]]
*** Select repository based on snapshot
If youâ€™re using Maven repositories you will also have to select the right repository depending on your artifacts: SNAPSHOT versions go to the /snapshot repository while other versions go to the /releases repository.
Doing this selection can be done by using the value of the ~isSnapshot~ SettingKey:

#+begin_src scala
publishTo := {
  val nexus = "https://my.artifact.repo.net/"
  if (isSnapshot.value)
    Some("snapshots" at nexus + "content/repositories/snapshots")
  else
    Some("releases"  at nexus + "service/local/staging/deploy/maven2")
}
#+end_src
** Vim
*** Fix indentation
The shortcut to fix code indentation in vim is ~=~.

You can use visual mode to select a block of code and use ~=~ to fix indentation for that selection.

You can also use ~=G~ to fix indentation for every line below the cursor.

[[https://dev.to/ka11away/7-vim-tips-that-changed-my-life-with-demo-51hg][h/t]]

*** Resize windows automatically

~CTRL+w =~

[[https://dev.to/ka11away/7-vim-tips-that-changed-my-life-with-demo-51hg][h/t]]
